#!/usr/bin/env python3
import os
from pathlib import Path

PHASES = [
    "0-Scoping", "1-Reconnaissance", "2-Enumeration",
    "3-Exploitation", "4-PostExploitation", "5-Reporting",
    "loot", "screenshots", "artifacts"
]

CHECKLISTS = {
    "0-Scoping": "# Scoping Checklist\n\n- [ ] Confirm targets\n- [ ] Timeline and rules\n",
    "1-Reconnaissance": "# Recon Checklist\n\n- [ ] Subdomain discovery\n- [ ] TLS checks\n",
    "2-Enumeration": "# Enumeration Checklist\n\n- [ ] Port scan\n- [ ] Fingerprint services\n",
    "3-Exploitation": "# Exploitation Checklist\n\n- [ ] Find CVEs\n- [ ] Auth bypass\n",
    "4-PostExploitation": "# Post-Exploitation Checklist\n\n- [ ] Lateral movement\n- [ ] Persistence\n",
    "5-Reporting": "# Reporting Notes\n\n- [ ] Evidence\n- [ ] Recommendations\n"
}

GITIGNORE_CONTENT = """# Ignore sensitive and generated content
loot/
artifacts/
screenshots/
checklist-report.md
.DS_Store
"""

def main():
    print("üì¶ Pentest Project Setup (Safe Mode)")
    project_name = input("Enter the pentest project name: ").strip().replace(" ", "_")
    project_path = Path.cwd() / "projects" / project_name
    project_path.mkdir(parents=True, exist_ok=True)

    for phase in PHASES:
        phase_path = project_path / phase
        phase_path.mkdir(parents=True, exist_ok=True)
        if phase in CHECKLISTS:
            checklist_file = phase_path / "checklist.md"
            with open(checklist_file, "w") as f:
                f.write(CHECKLISTS[phase])

    with open(project_path / ".gitignore", "w") as f:
        f.write(GITIGNORE_CONTENT)

    with open(project_path / "checklist-report.md", "w") as f:
        f.write(f"# Checklist Summary Report for {project_name}\n\n(Autogenerated. Fill in as needed.)\n")

    print(f"‚úÖ Project '{project_name}' created at: {project_path.resolve()}")
    print("üö´ Sensitive directories (loot/, artifacts/, screenshots/) are git-ignored by default.")
    print("‚ö†Ô∏è  Double-check your .gitignore before committing this project to version control.")

if __name__ == "__main__":
    main()
